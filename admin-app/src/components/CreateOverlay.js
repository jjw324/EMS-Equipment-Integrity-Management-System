import axios from 'axios';
import React, { Component } from 'react';
import './CreateOverlay.css';
import termMap from './termMap.json';

/**
 * Provides modal window for creating new inventory items.
 * 
 * @class
 */
export default class CreateOverlay extends Component {
    constructor() {
        super();

        this.state = { itemType: "ordinary_items" };

        this.handleSubmit = this.handleSubmit.bind(this);
        this.handleExitClick = this.handleExitClick.bind(this);
        this.handleItemTypeClick = this.handleItemTypeClick.bind(this);
        this.generateForm = this.generateForm.bind(this);
    }

    /**
     * Confirms user input with user and then posts object to database.
     * 
     * @param {Object} event HTML Event.
     */
    async handleSubmit(event) {
        event.preventDefault();
        const item = this.props.editingItem;
        let changedItem = [];

        console.log(Object.keys(this.props.editingItem))

        if(Object.keys(this.props.editingItem).length === 0) {
            const res = window.confirm("No changes made. Is this correct?");
            if(res) this.props.handleClose(this.constructor.name);
            return;
        }

        for (const prop in item) {
            changedItem.push(`${termMap[prop].fullLabel}: ${item[prop]}`);
        }

        const res = window.confirm(`New Item:\n\n${changedItem.join('\n')}\n\nSubmit?`);

        if (res) {
            try {
                const apiRes = (this.state.itemType === "ordinary_items")
                    ? await axios.post(`http://${process.env.REACT_APP_API_URL}/item`, item)
                    : await axios.post(`http://${process.env.REACT_APP_API_URL}/specialitem`, item);
                console.log(apiRes);
                this.props.handleClose(this.constructor.name);
            } catch (err) {
                window.alert("Unable to post item to database. Please try again.");
                console.log(err);
            }
        }
    }

    /**
     * Confirms if user wants to exit and then closes the modal window.
     */
    handleExitClick() {
        let res;

        if (Object.keys(this.props.editingItem).length !== 0)
            res = window.confirm("Are you sure you want to exit? Any edits will be lost.");
        else res = true;

        if (res) this.props.handleClose(this.constructor.name);
    }

    /**
     * Changes which type of object the user is creating.
     * 
     * @param {Object} event HTML event from button click.
     */
    handleItemTypeClick(event) {
        this.props.handleFormChange();
        if (event.target.id === "leftButton") this.setState({ itemType: "ordinary_items" });
        else this.setState({ itemType: "special_items" });
    }

    /**
     * Generates an HTML form to create an item.
     * 
     * @param {string} itemType ordinary_items OR special_items - determines which attributes appear on the form.
     */
    generateForm(itemType) {
        let labels = [];
        let boxes = [];
        let key = 0;
        let properties = [];

        for (const property in termMap) {
            if (termMap[property].associations.includes(itemType)) {
                properties.push(property);
            }
        }

        for (const p in properties) {
            const property = properties[p];
            let inputType;
            if (termMap[property].type === "String") inputType = "text";
            else if (termMap[property].type === "Number") inputType = "number";
            else if (termMap[property].type === "Date") inputType = "date";

            labels.push(<div key={key} className="mb-05"><label htmlFor={property}>{termMap[property].fullLabel}:</label><br /></div>);
            key++;
            if (termMap[property].autoGenerated) {
                boxes.push(<div key={key} className="mb-05"><p>(auto-generated)</p></div>);
            } else {
                boxes.push(
                    <div key={key}>
                        <input className="w-100 mb-05" type={inputType} id={property} name={property} onChange={this.props.handleFormChange} value={this.props.editingItem[property] || ""} required />
                        <br />
                    </div>
                );
            }
            key++;
        }
        return (
            <>
                <div id="labels">{labels}</div>
                <div id="boxes">{boxes}</div>
                <div id="confirm" className="flex f-ai-center">
                    <button type="submit" className="fas fa-check w-100 bg-accept h-50" />
                </div>
            </>
        )
    }

    render() {
        if (!this.props.show) return null;

        const formElements = this.generateForm(this.state.itemType);
        const leftClass = this.state.itemType === "ordinary_items" ? "bg-gray" : "";
        const rightClass = this.state.itemType === "special_items" ? "bg-gray" : "";

        return (
            <div className="center-vh w-100 h-100 bg-haze fixed-u-l" onClick={this.handleExitClick}>
                <form className="w-40" onSubmit={this.handleSubmit}>
                    <div id="createOverlay-main" className="w-100 h-100 br-15 p-r-1 p-l-1 bg-white border-box" onClick={(e) => e.stopPropagation()}>
                        <div id="createOverlayTitle" className="flex f-j-spacebetween f-ai-center">
                            <button type="button" onClick={this.handleExitClick} className="br-1 w-5 mt-1 mb-1 fas fa-times" />
                            <h2>Add New Item</h2>
                            <button type="button" className="w-5 h-75 cw"></button>
                        </div>
                        <div id="itemType" className="flex f-j-center mb-1">
                            <button type="button" id="leftButton" className={leftClass + " w-35 l-round"} onClick={this.handleItemTypeClick}>Ordinary Item</button>
                            <button type="button" id="rightButton" className={rightClass + " w-35 r-round"} onClick={this.handleItemTypeClick}>Special Item</button>
                        </div>
                        {formElements}
                    </div>
                </form>
            </div>
        )
    }
}